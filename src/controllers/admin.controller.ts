import { db } from "../database";
import type { ResultSetHeader } from "mysql2";
import bcrypt from "bcrypt";
import type { Request, Response } from "express";

// üü¢ L·∫•y danh s√°ch t√†i kho·∫£n
export const getAllUsers = async (_req: Request, res: Response) => {
  try {
    const [rows] = await db.query(`
      SELECT 
        u.id, 
        u.fullname, 
        u.username, 
        u.email, 
        u.avatar, 
        u.role, 
        u.created_at,
        kh.HoTen, 
        kh.SoDienThoai, 
        kh.TinhThanh, 
        kh.QuanHuyen, 
        kh.PhuongXa, 
        kh.DiaChiChiTiet, 
        kh.DiaChiDayDu
      FROM users u
      LEFT JOIN khachhang kh ON u.id = kh.MaKH
      ORDER BY u.created_at DESC
    `);
    res.json(rows);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "L·ªói khi l·∫•y danh s√°ch", error: err });
  }
};

// üü¢ Th√™m t√†i kho·∫£n m·ªõi
export const createUser = async (req: Request, res: Response) => {
  try {
    const {
      username,
      password,
      email,
      role,
      fullname,
      SoDienThoai,
      TinhThanh,
      QuanHuyen,
      PhuongXa,
      DiaChiChiTiet,
      avatar,
    } = req.body;

    if (!username || !password) {
      return res
        .status(400)
        .json({ message: "username v√† password l√† b·∫Øt bu·ªôc" });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    const safeFullname = fullname || username;

    // T·∫°o user
    const [userResult] = await db.execute<ResultSetHeader>(
      `INSERT INTO users (fullname, username, password, email, role, avatar) 
       VALUES (?, ?, ?, ?, ?, ?)`,
      [
        safeFullname,
        username,
        hashedPassword,
        email,
        role || "user",
        avatar ?? null,
      ]
    );

    const userId = userResult.insertId;

    // ‚úÖ Gh√©p ƒë·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß (t·ª´ t√™n, kh√¥ng t·ª´ m√£)
    const DiaChiDayDu = [DiaChiChiTiet, PhuongXa, QuanHuyen, TinhThanh]
      .filter(Boolean)
      .join(", ");

    // T·∫°o b·∫£n ghi KhachHang
    await db.execute<ResultSetHeader>(
      `INSERT INTO khachhang 
   (MaKH, HoTen, SoDienThoai, TinhThanh, QuanHuyen, PhuongXa, DiaChiChiTiet, user_id)
   VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,
      [
        userId,
        safeFullname,
        SoDienThoai ?? null,
        TinhThanh ?? null,
        QuanHuyen ?? null,
        PhuongXa ?? null,
        DiaChiChiTiet ?? null,
        userId,
      ]
    );

    // L·∫•y l·∫°i user v·ª´a t·∫°o
    const [rows] = await db.query(
      `
      SELECT 
        u.id, u.fullname, u.username, u.email, u.avatar, u.role, u.created_at,
        kh.HoTen, kh.SoDienThoai, kh.TinhThanh, kh.QuanHuyen, kh.PhuongXa, 
        kh.DiaChiChiTiet, kh.DiaChiDayDu
      FROM users u
      LEFT JOIN khachhang kh ON u.id = kh.MaKH
      WHERE u.id = ?`,
      [userId]
    );

    res
      .status(201)
      .json({ message: "T·∫°o t√†i kho·∫£n th√†nh c√¥ng", user: (rows as any)[0] });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "L·ªói khi t·∫°o t√†i kho·∫£n", error: err });
  }
};

// üü¢ C·∫≠p nh·∫≠t t√†i kho·∫£n
export const updateUser = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const {
      username,
      email,
      role,
      fullname,
      SoDienThoai,
      TinhThanh,
      QuanHuyen,
      PhuongXa,
      DiaChiChiTiet,
      avatar,
    } = req.body;

    // L·∫•y th√¥ng tin c≈©
    const [oldRows] = await db.query(
      `
      SELECT 
        u.fullname, u.username, u.email, u.role, u.avatar,
        kh.SoDienThoai, kh.TinhThanh, kh.QuanHuyen, kh.PhuongXa, 
        kh.DiaChiChiTiet, kh.DiaChiDayDu
      FROM users u
      LEFT JOIN khachhang kh ON u.id = kh.MaKH
      WHERE u.id = ?`,
      [id]
    );

    const oldUser = Array.isArray(oldRows) ? (oldRows as any)[0] : null;
    if (!oldUser)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });

    // G·ªôp gi√° tr·ªã m·ªõi/c≈©
    const safeData = {
      fullname: fullname ?? oldUser.fullname,
      username: username ?? oldUser.username,
      email: email ?? oldUser.email,
      role: role ?? oldUser.role,
      avatar: avatar ?? oldUser.avatar,
      SoDienThoai: SoDienThoai ?? oldUser.SoDienThoai,
      TinhThanh: TinhThanh ?? oldUser.TinhThanh,
      QuanHuyen: QuanHuyen ?? oldUser.QuanHuyen,
      PhuongXa: PhuongXa ?? oldUser.PhuongXa,
      DiaChiChiTiet: DiaChiChiTiet ?? oldUser.DiaChiChiTiet,
    };

    // ‚úÖ T·∫°o ƒë·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß m·ªõi
    const DiaChiDayDu = [
      safeData.DiaChiChiTiet,
      safeData.PhuongXa,
      safeData.QuanHuyen,
      safeData.TinhThanh,
    ]
      .filter(Boolean)
      .join(", ");

    // C·∫≠p nh·∫≠t b·∫£ng users
    await db.execute<ResultSetHeader>(
      `UPDATE users 
       SET username = ?, email = ?, role = ?, avatar = ?, fullname = ?
       WHERE id = ?`,
      [
        safeData.username,
        safeData.email,
        safeData.role,
        safeData.avatar,
        safeData.fullname,
        id,
      ]
    );

    // C·∫≠p nh·∫≠t b·∫£ng KhachHang (üü¢ l∆∞u t√™n t·ªânh/huy·ªán/x√£)
    await db.execute<ResultSetHeader>(
      `UPDATE khachhang 
   SET HoTen = ?, SoDienThoai = ?, TinhThanh = ?, QuanHuyen = ?, PhuongXa = ?, 
       DiaChiChiTiet = ?
   WHERE MaKH = ?`,
      [
        safeData.fullname,
        safeData.SoDienThoai,
        safeData.TinhThanh,
        safeData.QuanHuyen,
        safeData.PhuongXa,
        safeData.DiaChiChiTiet,
        id,
      ]
    );

    // L·∫•y l·∫°i user sau c·∫≠p nh·∫≠t
    const [rows] = await db.query(
      `
      SELECT 
        u.id, u.fullname, u.username, u.email, u.avatar, u.role, u.created_at,
        kh.HoTen, kh.SoDienThoai, kh.TinhThanh, kh.QuanHuyen, kh.PhuongXa, 
        kh.DiaChiChiTiet, kh.DiaChiDayDu
      FROM users u
      LEFT JOIN khachhang kh ON u.id = kh.MaKH
      WHERE u.id = ?`,
      [id]
    );

    res.json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng", user: (rows as any)[0] });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "L·ªói khi c·∫≠p nh·∫≠t", error: err });
  }
};

// üü¢ X√≥a t√†i kho·∫£n
export const deleteUser = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    await db.execute<ResultSetHeader>(`DELETE FROM users WHERE id = ?`, [id]);
    res.json({ message: "X√≥a t√†i kho·∫£n th√†nh c√¥ng" });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "L·ªói khi x√≥a", error: err });
  }
};
